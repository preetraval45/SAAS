version: '3.8'

services:
  # PostgreSQL Database for Staging
  postgres-staging:
    image: postgres:15-alpine
    container_name: saas-postgres-staging
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_staging_data:/var/lib/postgresql/data
      - ./db/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "${POSTGRES_PORT:-5433}:5432"
    networks:
      - saas-staging-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend API for Staging
  backend-staging:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: saas-backend-staging
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - SECRET_KEY=${SECRET_KEY}
      - ALGORITHM=${ALGORITHM}
      - ACCESS_TOKEN_EXPIRE_MINUTES=${ACCESS_TOKEN_EXPIRE_MINUTES}
      - REFRESH_TOKEN_EXPIRE_DAYS=${REFRESH_TOKEN_EXPIRE_DAYS}
      - ENVIRONMENT=${ENVIRONMENT}
      - DEBUG=${DEBUG}
      - LOG_LEVEL=${LOG_LEVEL}
      - LOG_FORMAT=${LOG_FORMAT}
      - ALLOWED_ORIGINS=${ALLOWED_ORIGINS}
      - ALLOWED_METHODS=${ALLOWED_METHODS}
      - ALLOWED_HEADERS=${ALLOWED_HEADERS}
      - ALLOW_CREDENTIALS=${ALLOW_CREDENTIALS}
      - MAX_AGE=${MAX_AGE}
    volumes:
      - ./backend/logs:/app/logs
      - staging_secrets:/app/secrets:ro
    ports:
      - "8001:8000"
    networks:
      - saas-staging-network
    depends_on:
      postgres-staging:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend for Staging
  frontend-staging:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: saas-frontend-staging
    environment:
      - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL}
      - NODE_ENV=${NODE_ENV}
    ports:
      - "3001:3000"
    networks:
      - saas-staging-network
    depends_on:
      - backend-staging
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Reverse Proxy for Staging
  nginx-staging:
    image: nginx:alpine
    container_name: saas-nginx-staging
    volumes:
      - ./config/nginx/nginx.staging.conf:/etc/nginx/nginx.conf:ro
      - ./config/nginx/ssl:/etc/nginx/ssl:ro
      - staging_logs:/var/log/nginx
    ports:
      - "${NGINX_PORT:-8080}:80"
      - "${NGINX_SSL_PORT:-8443}:443"
    networks:
      - saas-staging-network
    depends_on:
      - frontend-staging
      - backend-staging
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis for Staging (caching and sessions)
  redis-staging:
    image: redis:7-alpine
    container_name: saas-redis-staging
    command: redis-server --requirepass ${REDIS_PASSWORD:-staging_redis_pass}
    volumes:
      - redis_staging_data:/data
    ports:
      - "6380:6379"
    networks:
      - saas-staging-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_staging_data:
    driver: local
  redis_staging_data:
    driver: local
  staging_logs:
    driver: local
  staging_secrets:
    driver: local

networks:
  saas-staging-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16