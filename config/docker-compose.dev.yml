version: '3.8'

services:
  # PostgreSQL Database (same as production)
  postgres:
    image: postgres:15-alpine
    container_name: saas_postgres_dev
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-aci_db}
      POSTGRES_USER: ${POSTGRES_USER:-aci_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-aci_password}
    volumes:
      - postgres_data_dev:/var/lib/postgresql/data
      - ./db/migrations:/docker-entrypoint-initdb.d:ro
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    networks:
      - saas_network_dev
    restart: unless-stopped

  # FastAPI Backend (Development)
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
    container_name: saas_backend_dev
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-aci_user}:${POSTGRES_PASSWORD:-aci_password}@postgres:5432/${POSTGRES_DB:-aci_db}
      - SECRET_KEY=${SECRET_KEY:-dev-secret-key}
      - ALGORITHM=${ALGORITHM:-HS256}
      - ACCESS_TOKEN_EXPIRE_MINUTES=${ACCESS_TOKEN_EXPIRE_MINUTES:-30}
      - ENVIRONMENT=development
      - DEBUG=true
      - ALLOWED_ORIGINS=["http://localhost:3000", "http://frontend:3000"]
    volumes:
      - ./backend:/app
      - backend_logs_dev:/app/logs
    ports:
      - "${BACKEND_PORT:-8000}:8000"
    depends_on:
      - postgres
    networks:
      - saas_network_dev
    restart: unless-stopped
    command: ["uvicorn", "main:app", "--host", "0.0.0.0", "--port", "8000", "--reload"]

  # Next.js Frontend (Development)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    container_name: saas_frontend_dev
    environment:
      - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL:-http://localhost:8000}
      - NODE_ENV=development
      - NEXT_TELEMETRY_DISABLED=1
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - frontend_logs_dev:/app/logs
    ports:
      - "${FRONTEND_PORT:-3000}:3000"
    depends_on:
      - backend
    networks:
      - saas_network_dev
    restart: unless-stopped
    command: ["npm", "run", "dev"]

  # Nginx Reverse Proxy (Development)
  nginx:
    image: nginx:alpine
    container_name: saas_nginx_dev
    ports:
      - "${NGINX_PORT:-80}:80"
    volumes:
      - ./nginx/nginx.dev.conf:/etc/nginx/nginx.conf:ro
      - nginx_logs_dev:/var/log/nginx
    depends_on:
      - frontend
      - backend
    networks:
      - saas_network_dev
    restart: unless-stopped

volumes:
  postgres_data_dev:
    driver: local
  backend_logs_dev:
    driver: local
  frontend_logs_dev:
    driver: local
  nginx_logs_dev:
    driver: local

networks:
  saas_network_dev:
    driver: bridge 